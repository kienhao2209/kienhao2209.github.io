[{"uri":"/vi/","title":"Xây dựng hệ thống quét hóa đơn AI trên kiến trúc Serverless","tags":[],"description":"","content":"Xây dựng hệ thống quét hóa đơn AI trên kiến trúc Serverless Tổng quan Trong bài lab này, bạn sẽ xây dựng một hệ thống quét hóa đơn AI theo kiến trúc Serverless trên AWS. Ứng dụng này cho phép người dùng upload hóa đơn, sau đó trích xuất dữ liệu bằng Amazon Textract, phân tích và chuẩn hóa dữ liệu bằng Amazon Bedrock, lưu trữ trong Amazon DynamoDB và truy xuất thông qua API Gateway.\nFrontend được triển khai trên AWS Amplify, hỗ trợ đăng nhập và phân quyền với Amazon Cognito. Hệ thống sử dụng CloudWatch để giám sát.\nAmazon S3 Amazon S3 (Simple Storage Service) là dịch vụ lưu trữ đối tượng (object storage) của AWS, được sử dụng để lưu trữ file hóa đơn và các tài liệu liên quan. Nó đảm bảo độ bền dữ liệu cao, khả năng mở rộng linh hoạt và truy cập nhanh chóng từ bất kỳ đâu.\nAmazon Textract Amazon Textract là dịch vụ AI dùng để trích xuất văn bản, bảng biểu và dữ liệu có cấu trúc từ các hóa đơn. Textract giúp loại bỏ việc nhập liệu thủ công, tăng tốc quá trình số hóa tài liệu.\nAmazon Bedrock Amazon Bedrock là dịch vụ cung cấp mô hình AI dưới dạng serverless, dùng để phân tích, hiểu và chuẩn hóa dữ liệu hóa đơn. Nó cho phép xử lý thông tin nâng cao mà không cần quản lý hạ tầng AI.\nAWS Lambda AWS Lambda là dịch vụ điện toán không máy chủ (serverless) cho phép chạy code để xử lý các sự kiện như upload hóa đơn, trích xuất và lưu trữ dữ liệu, mà không cần quản lý máy chủ.\nAmazon DynamoDB Amazon DynamoDB là cơ sở dữ liệu NoSQL được quản lý hoàn toàn, dùng để lưu trữ dữ liệu hóa đơn sau khi đã được trích xuất và phân tích. DynamoDB cung cấp hiệu năng nhanh, khả năng mở rộng tự động và độ tin cậy cao.\nAmazon API Gateway Amazon API Gateway là dịch vụ tạo, quản lý và bảo mật các API. Trong hệ thống này, nó cung cấp các API để upload file hóa đơn và truy xuất dữ liệu đã được lưu trữ.\nAmazon Cognito Amazon Cognito là dịch vụ quản lý xác thực và phân quyền người dùng. Nó cung cấp đăng nhập an toàn cho ứng dụng frontend, tích hợp dễ dàng với API Gateway và các dịch vụ AWS khác.\nAWS Amplify AWS Amplify là nền tảng phát triển và triển khai frontend, giúp xây dựng giao diện người dùng hiện đại và kết nối trực tiếp với các API backend. Hệ thống frontend của ứng dụng được triển khai qua Amplify.\nAmazon CloudWatch Amazon CloudWatch là dịch vụ giám sát hệ thống, thu thập và phân tích log, chỉ số (metrics) và sự kiện từ toàn bộ các thành phần trong hệ thống. Nó giúp theo dõi hiệu suất và cảnh báo sớm các vấn đề.\nNội dung Giới thiệu Chuẩn bị môi trường Xử lý hóa đơn bằng AI Triển khai API Gateway Kiểm thử với Postman Triển khai Frontend Thực hành End-to-End Dọn dẹp tài nguyên "},{"uri":"/vi/7-cleanup/7.1-removeapigateway/","title":"Xóa API Gateway","tags":[],"description":"","content":"Các bước thực hiện Mở AWS Management Console → Tìm kiếm dịch vụ API Gateway. Trong danh sách API, chọn PostInvoiceAPI. Ở phần API actions, chọn Delete API. Xác nhận bằng cách nhập: confirm. Kiểm tra API đã xóa thành công. Lặp lại thao tác trên với GetInvoiceAPI. "},{"uri":"/vi/1-introduce/","title":"Giới thiệu","tags":[],"description":"","content":"Giới thiệu Trong bài lab này, bạn sẽ xây dựng Hệ thống Quét Hóa Đơn AI Không Máy Chủ (Serverless) sử dụng các dịch vụ AWS. Giải pháp này bao gồm các thành phần chính sau:\nAmazon S3 – lưu trữ các tệp hóa đơn được tải lên. AWS Lambda – xử lý hóa đơn, kết hợp Amazon Textract và Bedrock. Amazon DynamoDB – lưu trữ dữ liệu đã trích xuất và chuẩn hóa. Amazon API Gateway – cung cấp các API bảo mật để tải lên và truy vấn dữ liệu hóa đơn. AWS Amplify – triển khai và quản lý ứng dụng giao diện người dùng. Amazon Cognito – quản lý xác thực người dùng và kiểm soát quyền truy cập API. Amazon CloudWatch – giám sát log, chỉ số và tình trạng tổng thể của hệ thống. Kiến thức đạt được Sau khi hoàn thành bài lab, bạn sẽ có kinh nghiệm thực hành về:\nThiết kế và xây dựng kiến trúc AI serverless. Sử dụng Amazon Textract và Bedrock để trích xuất và làm giàu dữ liệu hóa đơn. Tạo API bảo mật và có khả năng mở rộng với API Gateway, Lambda và DynamoDB. Triển khai giao diện hiện đại với AWS Amplify và bảo mật bằng Cognito. Giám sát hiệu suất, tối ưu chi phí và dọn dẹp tài nguyên AWS. "},{"uri":"/vi/5-testwithpostman/5.1-testuploadfile/","title":"Kiểm thử tải tệp hóa đơn","tags":[],"description":"","content":"Yêu cầu chuẩn bị Đã cài đặt Postman (https://www.postman.com/downloads). Chuẩn bị tài nguyên Tải các tệp dưới đây trước khi kiểm thử API trên Postman:\ndemo_invoice.png demo_invoice2.png demo_invoice3.png Bước 1: Convert hình ảnh sang Base64 Chúng ta sẽ dùng công cụ online base64-image.de:\nTruy cập trang web và chọn file demo_invoice.png. Trang web sẽ tự động convert sang Base64. Nhấn \u0026lt;/\u0026gt; show code để lấy Base64. Sao chép đoạn mã Base64. Lưu vào Notepad tạm.\nTiếp tục lặp lại cho 2 file còn lại.\nBước 2: Tạo collection trong Postman Mở ứng dụng Postman. Nhấn vào dấu \u0026quot;+\u0026quot; để tạo collection. Nhấn Blank collection. Đặt tên: InvoiceUploadAPI-Tests Bước 3: Tạo request Trong Collection vừa tạo, nhấn dấu \u0026quot;+\u0026quot; để tạo request. Đặt tên: Upload Invoice. Chọn method POST. Truy cập API Gateway, chọn API: PostInvoiceAPI. Chọn mục Stages. Bấm dấu “+” để mở ra đường dẫn đầy đủ. Chọn phương thức POST và sao chép Invoke URL. Dán Invoke URL vừa sao chép vào trong Postman như sau: Chọn tab Headers, cấu hình như sau: Content-Type: application/json Chọn tab Body → chọn raw → chọn JSON. Dán đoạn JSON vào Postman: { \u0026#34;file\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;filename\u0026#34;: \u0026#34;\u0026#34; } Dán Base64 đã lưu tạm trong Notepad và viết tên file vào như sau: Nhấn nút Send để xem kết quả. Kết quả trả về thành công như sau: Truy cập vào S3 → Vào thư mục uploads/ → Xác nhận file đã được upload. Truy cập vào DynamoDB → Chọn Explore items → Chọn bảng InvoiceData. "},{"uri":"/vi/4-deployingapigateway/4.1-creategetapigateway/","title":"Tạo API Gateway (GET)","tags":[],"description":"","content":"Tổng quan Phần này hướng dẫn bạn tạo REST API tên GetInvoiceAPI với các route để truy vấn và cập nhật dữ liệu hóa đơn. Mỗi route được kết nối với Lambda và bật CORS, sau đó deploy với stage dev.\nBước 1: Tạo REST API Đăng nhập vào AWS Management Console, tìm và truy cập API Gateway. Nhấn Create an API. Chọn loại REST API, sau đó nhấn Build. Trong phần cấu hình:\nAPI name: GetInvoiceAPI Description: Post Invoice File by API Gateway Endpoint Type: chọn Regional. Nhấn Create API để hoàn tất. Bước 2: Tạo các Resource \u0026amp; Method Resource: /invoice Trong API GetInvoiceAPI, chọn Create resource. Nhập thông tin:\nResource path: / Resource name: invoice Nhấn Create resource.\nSau khi resource /invoice được tạo, chọn lại nó trong cây tài nguyên. Nhấn Create method. Cấu hình trong phần Create method:\nMethod type: GET. Integration type: Lambda function. Lambda proxy integration: Bật. Lambda function: FetchInvoiceDetailsFunction. Nhấn Create method. API Gateway sẽ được tạo và chuyển đến trang cấu hình chi tiết của API Gateway. Resource: /invoice/{id} Trong cây tài nguyên, chọn resource /invoice. Nhấn Create resource. Nhập thông tin:\nResource path: /invoice/ Resource name: {id} Nhấn Create resource.\nSau khi resource /invoice/{id} được tạo, chọn lại nó trong cây tài nguyên. Nhấn Create method. Cấu hình trong phần Create method:\nMethod type: GET. Integration type: Lambda function. Lambda proxy integration: Bật. Lambda function: FetchInvoiceDetailsFunction. Nhấn Create method. Tiếp tục thêm method PATCH.\nChọn lại nó trong cây tài nguyên và nhấn Create method. - Thực hiện cấu hình tương tự như trên:\r- **Method type**: PATCH\r- **Integration type**: Lambda Function\r- **Use Lambda Proxy integration**: Bật\r- **Lambda Function**: FetchInvoiceDetailsFunction\rNhấn Create method. Resource: /invoice/starred Trong API GetInvoiceAPI, chọn resource /invoice. Nhấn Create resource. Cấu hình:\nResource path: /invoice/ Resource name: starred Nhấn Create resource.\nSau khi resource được tạo, chọn lại /invoice/starred trong cây tài nguyên. Nhấn Create method. Cấu hình trong phần Create method:\nMethod type: GET. Integration type: Lambda function. Lambda proxy integration: Bật. Lambda function: FetchInvoiceDetailsFunction. Nhấn Create method. Resource: /invoice/starred/{id} Trong API GetInvoiceAPI, chọn resource /invoice/starred. Nhấn Create resource. Cấu hình:\nResource path: /invoice/starred/ Resource name: {id} Nhấn Create resource.\nSau khi resource được tạo, chọn lại /invoice/starred/{id} trong cây tài nguyên. Nhấn Create method. Cấu hình trong phần Create method:\nMethod type: PATCH. Integration type: Lambda function. Lambda proxy integration: Bật. Lambda function: FetchInvoiceDetailsFunction. Nhấn Create method. Resource: /invoice/tags Trong API GetInvoiceAPI, chọn resource /invoice. Nhấn Create resource. Cấu hình:\nResource path: /invoice/ Resource name: tags Nhấn Create resource.\nResource: /invoice/tags/{id} Trong cây tài nguyên, chọn lại /invoice/tags. Nhấn Create resource. Cấu hình:\nResource path: /invoice/tags/ Resource name: {id} Nhấn Create resource.\nSau khi resource được tạo, chọn lại /invoice/tags/{id} trong cây tài nguyên. Nhấn Create method. Cấu hình trong phần Create method:\nMethod type: PATCH. Integration type: Lambda function. Lambda proxy integration: Bật. Lambda function: FetchInvoiceDetailsFunction. Nhấn Create method. Bước 3: Bật CORS cho các method Trong cây tài nguyên của API GetInvoiceAPI, chọn resource /invoice/{id}. Nhấn Enable CORS. Tại Access-Control-Allow-Methods, bật CORS cho:\nGET PATCH Nhấn Save.\nLặp lại các bước trên cho từng resource còn lại:\n/invoice/starred/{id}: bật CORS cho PATCH /invoice/tags/{id}: bật CORS cho PATCH Bước 4: Deploy API Nhấn Deploy API. Trong modal Deploy API:\nStage: [New Stage]. Stage name: dev. Deployment description: Test API Method GET. Nhấn Deploy. "},{"uri":"/vi/2-environmentsetup/2.1-createpolicy/","title":"Tạo IAM Policies","tags":[],"description":"","content":"Tổng quan Trong bước này, bạn sẽ tạo 2 IAM Policy cần thiết cho hệ thống:\nAIInvoiceScannerFullPolicy: cấp quyền đầy đủ cho các dịch vụ backend như Textract, Bedrock, Lambda, DynamoDB, API Gateway, Cognito và CloudWatch. AmplifyAdminPolicy: cấp quyền toàn phần cho việc triển khai frontend sử dụng AWS Amplify. Bước 1: Truy cập IAM Console Truy cập AWS Console, tìm IAM, sau đó chọn IAM trong kết quả. Ở menu bên trái, chọn Policies. Nhấn nút Create policy. Bước 2: Tạo policy AIInvoiceScannerFullPolicy Trong trang tạo policy, chuyển sang tab JSON. Dán đoạn mã sau vào trình chỉnh sửa: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;S3FullAccess\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:*\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; }, { \u0026#34;Sid\u0026#34;: \u0026#34;TextractFullAccess\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;textract:*\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; }, { \u0026#34;Sid\u0026#34;: \u0026#34;BedrockFullAccess\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;bedrock:*\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; }, { \u0026#34;Sid\u0026#34;: \u0026#34;LambdaFullAccess\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;lambda:*\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; }, { \u0026#34;Sid\u0026#34;: \u0026#34;LambdaBasicExecutionRole\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;logs:CreateLogGroup\u0026#34;, \u0026#34;logs:CreateLogStream\u0026#34;, \u0026#34;logs:PutLogEvents\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; }, { \u0026#34;Sid\u0026#34;: \u0026#34;DynamoDBFullAccess\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;dynamodb:*\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; }, { \u0026#34;Sid\u0026#34;: \u0026#34;APIGatewayAdmin\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;apigateway:*\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; }, { \u0026#34;Sid\u0026#34;: \u0026#34;CognitoPowerUser\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [\u0026#34;cognito-idp:*\u0026#34;, \u0026#34;cognito-sync:*\u0026#34;, \u0026#34;cognito-identity:*\u0026#34;], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; }, { \u0026#34;Sid\u0026#34;: \u0026#34;CloudWatchFullAccess\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;cloudwatch:*\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; }, { \u0026#34;Sid\u0026#34;: \u0026#34;AllowIAMAccessForLambdaSetup\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;iam:DetachRolePolicy\u0026#34;, \u0026#34;iam:GetPolicy\u0026#34;, \u0026#34;iam:GetPolicyVersion\u0026#34;, \u0026#34;iam:GetRole\u0026#34;, \u0026#34;iam:ListRoles\u0026#34;, \u0026#34;iam:PassRole\u0026#34;, \u0026#34;iam:ListPolicies\u0026#34;, \u0026#34;iam:AttachRolePolicy\u0026#34;, \u0026#34;iam:ListRolePolicies\u0026#34;, \u0026#34;iam:ListAttachedRolePolicies\u0026#34;, \u0026#34;iam:PutRolePolicy\u0026#34;, \u0026#34;iam:GetRolePolicy\u0026#34;, \u0026#34;iam:ListInstanceProfilesForRole\u0026#34;, \u0026#34;iam:RemoveRoleFromInstanceProfile\u0026#34;, \u0026#34;iam:DeleteRole\u0026#34;, \u0026#34;iam:DeleteRolePolicy\u0026#34;, \u0026#34;iam:CreateRole\u0026#34;, \u0026#34;iam:TagRole\u0026#34;, \u0026#34;iam:UpdateRole\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; }, { \u0026#34;Sid\u0026#34;: \u0026#34;AllowValidatePolicy\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;access-analyzer:ValidatePolicy\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; }, { \u0026#34;Sid\u0026#34;: \u0026#34;CloudWatchLogsFullAccess\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;logs:DescribeLogGroups\u0026#34;, \u0026#34;logs:DescribeLogStreams\u0026#34;, \u0026#34;logs:GetLogEvents\u0026#34;, \u0026#34;logs:FilterLogEvents\u0026#34;, \u0026#34;logs:DeleteLogGroup\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; }, { \u0026#34;Sid\u0026#34;: \u0026#34;AllowDynamoDBAutoScalingDescribe\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;application-autoscaling:DescribeScalableTargets\u0026#34;, \u0026#34;application-autoscaling:DescribeScalingPolicies\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; }, { \u0026#34;Sid\u0026#34;: \u0026#34;AllowEC2VpcEndpointDescribe\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;ec2:DescribeVpcEndpoints\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; } ] } Nhấn Next để tiếp tục. Điền thông tin chi tiết:\nPolicy name: AIInvoiceScannerFullPolicy Description: Full permissions for S3, Textract, Bedrock, Lambda, DynamoDB, API Gateway, Cognito, and CloudWatch Nhấn Create policy để hoàn tất. Bước 3: Tạo policy AmplifyAdminPolicy Quay lại danh sách Policies, nhấn Create policy. Chuyển sang tab JSON, dán nội dung sau:\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;AmplifyAdminAccess\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;amplify:*\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; }, { \u0026#34;Sid\u0026#34;: \u0026#34;AmplifyHostingAccess\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [\u0026#34;amplifybackend:*\u0026#34;, \u0026#34;amplifyuibuilder:*\u0026#34;], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; } ] } Nhấn Next. Điền thông tin chi tiết:\nPolicy name: AmplifyAdminPolicy Description: Full access for Amplify frontend and backend Nhấn Create policy. Bước 4: Kiểm tra lại policies Quay về danh sách Policies.\nTìm kiếm và xác nhận hai policy đã được tạo:\nAIInvoiceScannerFullPolicy AmplifyAdminPolicy Nếu bạn không thấy policies vừa tạo, hãy thử làm mới trình duyệt hoặc kiểm tra lại tên nhập vào.\n"},{"uri":"/vi/3-aipoweredinvoiceprocessing/3.1-createlambdarole/","title":"Tạo IAM Role cho Lambda","tags":[],"description":"","content":"Tổng quan Trong bước này, bạn sẽ tạo một IAM Role chuyên biệt để các Lambda function trong hệ thống Serverless Invoice Scanner có thể truy cập vào các dịch vụ AWS như Amazon Textract, Amazon Bedrock, Amazon DynamoDB, Amazon S3 và CloudWatch Logs.\nBước 1: Truy cập IAM Console Mở AWS Management Console ở chế độ ẩn danh (Incognito) để tránh xung đột session nếu bạn đang đăng nhập bằng nhiều tài khoản.\nTìm kiếm và chọn IAM trong thanh tìm kiếm.\nTrong thanh điều hướng bên trái, chọn Roles, sau đó nhấn Create role. Bước 2: Cấu hình Role cho Lambda Trusted entity type: chọn AWS service Use case: chọn Lambda Nhấn Next để tiếp tục. Bước 3: Gán quyền cho IAM Role Trong bước Add permissions, hãy tìm và tick chọn các policy sau:\nAmazonS3FullAccess AmazonDynamoDBFullAccess AmazonTextractFullAccess AmazonBedrockFullAccess AWSLambdaBasicExecutionRole Nhấn Next để tiếp tục. Bước 4: Đặt tên và hoàn tất Role name: LambdaExecutionRole-AIInvoiceScanner Description: Role for Lambda to access S3, Textract, Bedrock, DynamoDB, and CloudWatch Nhấn Create role để hoàn tất. Sau khi tạo xong, trong IAM Console, vào mục Roles. Bạn sẽ thấy role LambdaExecutionRole-AIInvoiceScanner xuất hiện trong danh sách. "},{"uri":"/vi/7-cleanup/7.2-removelambdafunction/","title":"Xóa Lambda Functions","tags":[],"description":"","content":"Các bước thực hiện Mở AWS Management Console → Tìm kiếm dịch vụ Lambda. Trong danh sách Lambda, chọn các Lambda sau: Ở phần Actions, chọn Delete. Xác nhận bằng cách nhập: confirm. Kiểm tra Lambda đã xóa thành công. "},{"uri":"/vi/2-environmentsetup/","title":"Chuẩn bị môi trường","tags":[],"description":"","content":"Tổng quan Trong phần này, bạn sẽ thiết lập các tài nguyên cần thiết cho hệ thống, bao gồm IAM user, S3 bucket, DynamoDB table và Amazon Cognito để hỗ trợ xác thực.\nNội dung Tạo IAM Policies Tạo IAM User và cấp quyền Đăng nhập IAM User Tạo S3 Bucket Tạo DynamoDB Table Kích hoạt Nova Pro "},{"uri":"/vi/5-testwithpostman/5.2-testgetallinvoices/","title":"Kiểm thử lấy tất cả hóa đơn","tags":[],"description":"","content":"Yêu cầu chuẩn bị ⚠️ Vừa rồi chỉ hướng dẫn tải một tệp \u0026ldquo;demo_invoice.png\u0026rdquo;. Bạn hãy tải thêm 2 tệp hóa đơn còn lại nữa nhé!\nBước 1: Tạo collection trong Postman Mở ứng dụng Postman và nhấn dấu \u0026quot;+\u0026quot; để tạo collection. Nhấn Blank collection. Đặt tên: InvoiceGetAPI-Tests Bước 2: Tạo request Trong Collection vừa tạo, nhấn dấu \u0026quot;+\u0026quot; để tạo request. Đặt tên: Get All Invoices. Chọn method GET. Truy cập API Gateway, chọn API: GetInvoiceAPI. Chọn mục Stages. Bấm dấu “+” để mở ra đường dẫn đến /invoice như dưới đây: Chọn phương thức GET và sao chép Invoke URL. Dán Invoke URL vừa sao chép vào trong Postman như sau: Nhấn nút Send để xem kết quả. Kết quả trả về thành công như sau: Kiểm tra nếu đủ 3 hóa đơn tức là thành công ✅\n"},{"uri":"/vi/4-deployingapigateway/4.2-createpostapigateway/","title":"Tạo API Gateway (POST)","tags":[],"description":"","content":"Tổng quan Trong phần này, bạn sẽ tạo REST API Gateway để tiếp nhận hóa đơn người dùng gửi lên qua endpoint POST /uploads. API này sẽ tích hợp với Lambda Function #1 UploadInvoiceFileFunction, tự động xử lý ảnh/tệp hóa đơn bằng AI và lưu kết quả vào DynamoDB.\nBước 1: Tạo REST API Đăng nhập vào AWS Management Console, tìm và truy cập API Gateway. Nhấn Create API. Chọn loại REST API, sau đó nhấn Build. Trong phần cấu hình:\nAPI name: PostInvoiceAPI Description: Post Upload Invoice File by API Gateway Endpoint Type: chọn Regional. Nhấn Create API để hoàn tất.\nBước 2: Tạo Resource Resource: /uploads Trong API PostInvoiceAPI, chọn Create resource. Nhập thông tin:\nResource path: / Resource name: uploads Nhấn Create resource.\nBước 3: Tạo Method Method: POST Trong cây tài nguyên, chọn resource /uploads.\nNhấn Create method.\nCấu hình trong phần Create method:\nMethod type: POST. Integration type: Lambda function. Lambda proxy integration: Bật. Lambda function: UploadInvoiceFileFunction. Nhấn Create method. Method: PUT Trong cây tài nguyên, chọn resource /uploads.\nNhấn Create method.\nCấu hình trong phần Create method:\nMethod type: PUT. Integration type: Lambda function. Lambda proxy integration: Bật. Lambda function: UploadInvoiceFileFunction. Nhấn Create method. Bước 4: Bật CORS cho các method Trong cây tài nguyên của API PostInvoiceAPI, chọn resource /uploads. Nhấn Enable CORS. Tại Access-Control-Allow-Methods, bật CORS cho:\nPOST PUT Nhấn Save.\nBước 5: Deploy API Nhấn Deploy API. Trong modal Deploy API:\nStage: [New Stage]. Stage name: dev. Deployment description: Test API Method POST. Nhấn Deploy. "},{"uri":"/vi/2-environmentsetup/2.2-createiamuserandattachpolicy/","title":"Tạo IAM User và cấp quyền","tags":[],"description":"","content":"Tổng quan Trong bước này, bạn sẽ tạo một IAM User có quyền truy cập vào các dịch vụ AWS thông qua giao diện dòng lệnh (CLI) hoặc SDK. Người dùng này sẽ được gán 2 policy vừa tạo để có thể tương tác với backend và frontend của hệ thống Serverless Invoices Scanner.\nBước 1: Truy cập IAM Console Truy cập AWS Console, tìm IAM, sau đó chọn IAM trong kết quả. Ở menu bên trái, chọn Users. Nhấp vào nút Create user để bắt đầu tạo IAM User mới. Bước 2: Cấu hình IAM User User name: ai-invoice-scanner-user Tích chọn ô: Provide user access to the AWS Management Console. Chọn mục: I want to create an IAM user. Trong phần Console password:\nChọn mục: Custom password. Đặt mật khẩu: Admin@123 Bỏ tick chọn: Users must create a new password at next sign-in. Việc bỏ chọn tùy chọn này giúp người dùng không bị yêu cầu thay đổi mật khẩu khi đăng nhập lần đầu.\nNhấn Next để sang bước gán quyền. 💡 Bạn có thể chọn mật khẩu khác theo chính sách bảo mật nội bộ.\nBước 3: Gán policy cho IAM User Trong phần Set permissions, chọn Attach policies directly. Tìm và chọn các policy sau:\nAIInvoiceScannerFullPolicy AmplifyAdminPolicy Nhấn Next để tiếp tục. Nhấn Create user để hoàn tất việc tạo IAM User. Bước 4: Lưu thông tin đăng nhập Nhấn Download .csv file để lưu Access Key ID và mật khẩu console. Tệp sẽ được tải về dưới dạng Excel như hình sau — hãy lưu tệp vào máy tính để sử dụng sau. Bước 5: Kiểm tra thông tin IAM User Bấm Return to users list để quay về danh sách Users. IAM User vừa tạo sẽ hiển thị trong danh sách như sau: Nhấp vào để xem thông tin chi tiết của IAM User vừa tạo. Bước 6: Tạo Access Key Trong trang thông tin chi tiết của IAM User, chọn Create access key. Chọn Command Line Interface (CLI). Tích chọn ô: I understand the above recommendation and want to proceed to create an access key. Nhấn Next để tiếp tục. Bước 7: Đặt mô tả cho Access Key Description tag value: AI Invoice Scanner Project Bấm Create access key để tạo. Bước 8: Sao lưu Access Key Sau khi Access Key được tạo thành công, AWS sẽ cung cấp:\nAccess Key ID ✅ Secret Access Key 🔐 ⚠️ Lưu ý: Đây là lần duy nhất bạn thấy được Secret Access Key. Hãy lưu trữ cẩn thận và tuyệt đối không chia sẻ thông tin này trên GitHub hay bất kỳ nơi công khai nào.\nNhấn Download .csv file và lưu tệp vào máy tính để sử dụng sau. Nhấn Done để hoàn tất. Bước 9: Kiểm tra lại Access Key Trở lại tab Security credentials, bạn sẽ thấy Access Key ID đã được tạo. Kiểm tra xem Access Key vừa tạo đã có trạng thái Active. 💡 Lưu ý: Hãy đảm bảo bạn đã lưu Secret Access Key từ bước trước. Nếu chưa lưu, bạn cần xóa và tạo lại Access Key mới.\nCó thể deactivate hoặc xóa key này nếu không còn sử dụng. Tuyệt đối không commit Access Key vào GitHub hoặc chia sẻ công khai. Nếu bạn để lộ key, hãy vào IAM \u0026gt; User \u0026gt; Access Keys \u0026gt; Deactivate rồi Delete. "},{"uri":"/vi/3-aipoweredinvoiceprocessing/3.2-createlambdafunction-upload/","title":"Tạo Lambda Function #1","tags":[],"description":"","content":"Tổng quan Trong bước này, bạn sẽ tạo Lambda Function đầu tiên có tên là UploadInvoiceFileFunction. Function này sẽ được kích hoạt khi người dùng tải lên một file hóa đơn vào S3 bucket. Sau đó, nó sẽ sử dụng Amazon Textract để trích xuất văn bản, Amazon Bedrock để phân tích và hiểu nội dung, cuối cùng lưu thông tin vào DynamoDB.\nBước 1: Truy cập Lambda Console Đăng nhập vào AWS Console, tìm Lambda, sau đó chọn Lambda. ⚠️ Lưu ý: Hãy đảm bảo bạn đang ở đúng Region: N. Virginia (us-east-1) trước khi tạo Lambda function. Đây là vùng bạn đã tạo S3 bucket, DynamoDB table và đăng ký Amazon Bedrock. Nếu chọn sai vùng, Lambda sẽ không thể truy cập được các dịch vụ khác của hệ thống.\nNhấn Create function. Bước 2: Cấu hình Lambda Function Ở mục Author from scratch, nhập các thông tin sau:\nFunction name: UploadInvoiceFileFunction Runtime: Python 3.12 Architecture: x86_64 Permissions: Chọn Use an existing role Existing role: LambdaExecutionRole-AIInvoiceScanner (đã tạo ở bước trước) Nhấn Create function để khởi tạo. Bước 3: Thêm mã nguồn Python Sau khi function được tạo, cuộn xuống phần Code trong giao diện Lambda.\nDán toàn bộ đoạn mã Python dưới đây vào, thay thế nội dung mặc định:\nimport boto3 import json import uuid import base64 import re import time from decimal import Decimal # AWS clients s3 = boto3.client(\u0026#39;s3\u0026#39;) textract = boto3.client(\u0026#39;textract\u0026#39;) dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) bedrock = boto3.client(\u0026#39;bedrock-runtime\u0026#39;, region_name=\u0026#39;us-east-1\u0026#39;) # Constants BUCKET_NAME = \u0026#39;invoice-upload-s3-bucket\u0026#39; table = dynamodb.Table(\u0026#39;InvoiceData\u0026#39;) def decimal_default(obj): if isinstance(obj, Decimal): return float(round(obj, 2)) def make_response(status_code, body_dict): return { \u0026#39;statusCode\u0026#39;: status_code, \u0026#39;headers\u0026#39;: { \u0026#39;Access-Control-Allow-Origin\u0026#39;: \u0026#39;*\u0026#39;, \u0026#39;Access-Control-Allow-Credentials\u0026#39;: True, \u0026#39;Access-Control-Allow-Headers\u0026#39;: \u0026#39;*\u0026#39;, \u0026#39;Access-Control-Allow-Methods\u0026#39;: \u0026#39;OPTIONS,POST\u0026#39; }, \u0026#39;body\u0026#39;: json.dumps(body_dict, default=decimal_default) } def lambda_handler(event, context): print(\u0026#34;🔍 Incoming event:\u0026#34;) print(json.dumps(event)) try: # === CASE 1: API Gateway POST upload file === if \u0026#34;body\u0026#34; in event and isinstance(event[\u0026#39;body\u0026#39;], str) and not (\u0026#34;Records\u0026#34; in event): body = json.loads(event[\u0026#39;body\u0026#39;]) file_data = base64.b64decode(body[\u0026#39;file\u0026#39;]) filename = body.get(\u0026#39;filename\u0026#39;, f\u0026#39;invoice_{uuid.uuid4()}.png\u0026#39;) key = f\u0026#39;uploads/{filename}\u0026#39; s3.put_object( Bucket=BUCKET_NAME, Key=key, Body=file_data, ContentType=\u0026#39;image/png\u0026#39; ) print(f\u0026#34;✅ Uploaded \u0026#39;{key}\u0026#39;\u0026#34;) return make_response(200, { \u0026#39;message\u0026#39;: \u0026#39;Upload thành công\u0026#39;, \u0026#39;s3_path\u0026#39;: f\u0026#39;s3://{BUCKET_NAME}/{key}\u0026#39; }) # === CASE 2: S3 Trigger xử lý hóa đơn === elif \u0026#34;Records\u0026#34; in event and \u0026#34;s3\u0026#34; in event[\u0026#34;Records\u0026#34;][0]: bucket = event[\u0026#39;Records\u0026#39;][0][\u0026#39;s3\u0026#39;][\u0026#39;bucket\u0026#39;][\u0026#39;name\u0026#39;] key = event[\u0026#39;Records\u0026#39;][0][\u0026#39;s3\u0026#39;][\u0026#39;object\u0026#39;][\u0026#39;key\u0026#39;] print(f\u0026#34;📥 Trigger từ S3: bucket={bucket}, key={key}\u0026#34;) # 1. Textract textract_response = textract.detect_document_text( Document={\u0026#39;S3Object\u0026#39;: {\u0026#39;Bucket\u0026#39;: bucket, \u0026#39;Name\u0026#39;: key}} ) extracted_text = \u0026#39; \u0026#39;.join( [block[\u0026#39;Text\u0026#39;] for block in textract_response[\u0026#39;Blocks\u0026#39;] if block[\u0026#39;BlockType\u0026#39;] == \u0026#39;LINE\u0026#39;] ) if len(extracted_text.strip()) \u0026lt; 20: return make_response(400, {\u0026#39;error\u0026#39;: \u0026#39;Không phát hiện được nội dung hợp lệ từ ảnh.\u0026#39;}) # 2. Prompt cho Bedrock prompt = ( \u0026#34;You are a precise invoice data parser. Extract structured data from the invoice text below.\\n\u0026#34; \u0026#34;Return ONLY valid JSON with fields:\\n\u0026#34; \u0026#34;{\\n\u0026#34; \u0026#34; \\\u0026#34;InvoiceId\\\u0026#34;: \\\u0026#34;\\\u0026#34;,\\n\u0026#34; \u0026#34; \\\u0026#34;CustomerName\\\u0026#34;: \\\u0026#34;\\\u0026#34;,\\n\u0026#34; \u0026#34; \\\u0026#34;InvoiceDate\\\u0026#34;: \\\u0026#34;\\\u0026#34;,\\n\u0026#34; \u0026#34; \\\u0026#34;DueDate\\\u0026#34;: \\\u0026#34;\\\u0026#34;,\\n\u0026#34; \u0026#34; \\\u0026#34;PurchaseOrderNumber\\\u0026#34;: \\\u0026#34;\\\u0026#34;,\\n\u0026#34; \u0026#34; \\\u0026#34;Company\\\u0026#34;: {\\\u0026#34;Name\\\u0026#34;: \\\u0026#34;\\\u0026#34;, \\\u0026#34;Address\\\u0026#34;: \\\u0026#34;\\\u0026#34;},\\n\u0026#34; \u0026#34; \\\u0026#34;BillTo\\\u0026#34;: {\\\u0026#34;Name\\\u0026#34;: \\\u0026#34;\\\u0026#34;, \\\u0026#34;Address\\\u0026#34;: \\\u0026#34;\\\u0026#34;},\\n\u0026#34; \u0026#34; \\\u0026#34;ShipTo\\\u0026#34;: {\\\u0026#34;Name\\\u0026#34;: \\\u0026#34;\\\u0026#34;, \\\u0026#34;Address\\\u0026#34;: \\\u0026#34;\\\u0026#34;},\\n\u0026#34; \u0026#34; \\\u0026#34;Items\\\u0026#34;: [\\n\u0026#34; \u0026#34; {\\\u0026#34;Description\\\u0026#34;: \\\u0026#34;\\\u0026#34;, \\\u0026#34;Quantity\\\u0026#34;: 0, \\\u0026#34;UnitPrice\\\u0026#34;: 0.0, \\\u0026#34;Amount\\\u0026#34;: 0.0}\\n\u0026#34; \u0026#34; ],\\n\u0026#34; \u0026#34; \\\u0026#34;Subtotal\\\u0026#34;: 0.0,\\n\u0026#34; \u0026#34; \\\u0026#34;Tax\\\u0026#34;: {\\\u0026#34;Rate\\\u0026#34;: 0.0, \\\u0026#34;Amount\\\u0026#34;: 0.0},\\n\u0026#34; \u0026#34; \\\u0026#34;TotalAmount\\\u0026#34;: 0.0,\\n\u0026#34; \u0026#34; \\\u0026#34;Currency\\\u0026#34;: \\\u0026#34;\\\u0026#34;,\\n\u0026#34; \u0026#34; \\\u0026#34;PaymentTerms\\\u0026#34;: {\\\u0026#34;DueWithinDays\\\u0026#34;: 0, \\\u0026#34;PayableTo\\\u0026#34;: \\\u0026#34;\\\u0026#34;}\\n\u0026#34; \u0026#34;}\\n\u0026#34; \u0026#34;Rules:\\n\u0026#34; \u0026#34;- Normalize all dates to ISO format YYYY-MM-DD.\\n\u0026#34; \u0026#34;- If the text uses DD/MM/YYYY, convert to YYYY-MM-DD correctly.\\n\u0026#34; \u0026#34;- Ensure numeric values are floats.\\n\u0026#34; \u0026#34;- If a value is missing, set it to null.\\n\u0026#34; \u0026#34;- No explanation, no markdown, no extra text.\\n\\n\u0026#34; f\u0026#34;Invoice text:\\n{extracted_text}\u0026#34; ) messages = [{\u0026#34;role\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;content\u0026#34;: [{\u0026#34;text\u0026#34;: prompt}]}] response = bedrock.converse( modelId=\u0026#34;amazon.nova-pro-v1:0\u0026#34;, messages=messages, inferenceConfig={\u0026#34;maxTokens\u0026#34;: 1024, \u0026#34;temperature\u0026#34;: 0.2, \u0026#34;topP\u0026#34;: 0.9} ) ai_text = response[\u0026#39;output\u0026#39;][\u0026#39;message\u0026#39;][\u0026#39;content\u0026#39;][0][\u0026#39;text\u0026#39;] print(\u0026#34;🧠 Bedrock raw output:\u0026#34;, ai_text) # 3. Parse JSON output try: match = re.search(r\u0026#39;({.*})\u0026#39;, ai_text, re.DOTALL | re.MULTILINE) json_str = match.group(1) if match else ai_text.strip() result_json = json.loads(json_str, parse_float=Decimal) except Exception as e: print(\u0026#34;❌ Lỗi parse JSON:\u0026#34;, str(e)) result_json = {\u0026#34;error\u0026#34;: \u0026#34;Invalid JSON\u0026#34;, \u0026#34;raw_output\u0026#34;: ai_text} # 4. Lưu vào DynamoDB (thêm trường Tags rỗng) result_json[\u0026#39;S3Object\u0026#39;] = f\u0026#39;s3://{bucket}/{key}\u0026#39; if \u0026#39;Tags\u0026#39; not in result_json: result_json[\u0026#39;Tags\u0026#39;] = [] table.put_item(Item=result_json) print(\u0026#34;✅ Lưu vào DynamoDB thành công.\u0026#34;) return make_response(200, {\u0026#39;message\u0026#39;: \u0026#39;Xử lý thành công\u0026#39;, \u0026#39;parsed\u0026#39;: result_json}) else: return make_response(400, {\u0026#39;error\u0026#39;: \u0026#39;Request không hợp lệ.\u0026#39;}) except Exception as e: print(\u0026#34;❌ Lỗi tổng quát:\u0026#34;, str(e)) return make_response(500, {\u0026#39;error\u0026#39;: str(e)}) Nhấn Deploy để áp dụng thay đổi. Bước 4: Cấu hình Timeout và Memory Vào tab Configuration \u0026gt; General configuration. Nhấn Edit. Thay đổi các thông số sau:\nMemory (MB): 1024 Timeout: 1 minute Nhấn Save. Kết luận Bạn đã tạo thành công Lambda Function đầu tiên trong hệ thống: UploadInvoiceFileFunction.\nFunction này sẽ tự động được kích hoạt mỗi khi người dùng tải lên hóa đơn vào thư mục uploads/ trong S3. Nó sử dụng Amazon Textract để trích xuất văn bản từ hóa đơn. Sau đó sử dụng Amazon Bedrock Nova Pro để phân tích nội dung. Cuối cùng, dữ liệu sẽ được lưu trữ vào DynamoDB để phục vụ tra cứu và hiển thị. "},{"uri":"/vi/7-cleanup/7.3-removedynamodb/","title":"Xóa DynamoDB","tags":[],"description":"","content":"Các bước thực hiện Mở AWS Management Console → Tìm kiếm dịch vụ DynamoDB. Trong tab Tables, tìm và chọn bảng InvoiceData → Chọn Delete. Xác nhận bằng cách nhập: confirm → Chọn Delete. Kiểm tra InvoiceData đã xóa thành công. "},{"uri":"/vi/2-environmentsetup/2.3-loginwithiamuser/","title":"Đăng nhập IAM User","tags":[],"description":"","content":"Mục tiêu Trong bước này, bạn sẽ đăng nhập vào IAM User được cấp quyền để sử dụng AWS Console. Đây là bước bắt buộc trước khi triển khai bất kỳ tài nguyên nào.\nBước 1: Mở trình duyệt ở chế độ ẩn danh Mở Google Chrome (hoặc trình duyệt bạn đang sử dụng) ở chế độ ẩn danh. Cách nhanh nhất: Nhấn tổ hợp phím Ctrl + Shift + N. Việc này giúp bạn tránh các xung đột phiên đăng nhập nếu đang sử dụng nhiều tài khoản AWS. Bước 2: Mở file Excel chứa thông tin IAM User Mở file Excel đã được tải về từ người quản trị hệ thống.\nTrong file này, bạn sẽ thấy các thông tin sau:\nAccount ID IAM User name Password Thông tin này thường được cung cấp cho bạn qua email hoặc file đính kèm từ quản lý dự án.\nBước 3: Truy cập trang đăng nhập IAM Truy cập đường dẫn đăng nhập IAM có dạng:\nhttps://\u0026lt;ACCOUNT_ID\u0026gt;.signin.aws.amazon.com/console Thay \u0026lt;ACCOUNT_ID\u0026gt; bằng ID tài khoản AWS đã được cung cấp (ví dụ: 123456789012).\nBước 4: Nhập thông tin đăng nhập IAM user name: Nhập đúng tên người dùng IAM từ file Excel. Password: Nhập mật khẩu tương ứng. Sau đó nhấn nút Sign in để vào hệ thống. Bước 5: Chỉnh lại Region về N. Virginia Sau khi đăng nhập thành công vào AWS Management Console:\nNhìn lên góc trên bên phải màn hình. Nhấn vào tên Region hiện tại. Chọn lại N. Virginia (us-east-1). Toàn bộ tài nguyên của hệ thống sẽ được triển khai tại Region us-east-1 (N. Virginia). Hãy đảm bảo bạn đang thao tác tại đúng khu vực này.\nKết luận Bạn đã hoàn tất việc đăng nhập vào IAM User. Ở bước tiếp theo, bạn sẽ tiến hành tạo S3 Bucket tại Region us-east-1.\n"},{"uri":"/vi/3-aipoweredinvoiceprocessing/3.3-testlambdafunction-upload/","title":"Kiểm thử Lambda Function #1","tags":[],"description":"","content":"Tổng quan Trong bước này, bạn sẽ thực hiện kiểm thử Lambda Function UploadInvoiceFileFunction bằng cách tải lên một tệp hóa đơn mẫu vào S3 bucket. Việc kiểm thử nhằm xác nhận toàn bộ quá trình xử lý, từ khi người dùng tải file lên S3, trích xuất dữ liệu bằng Textract, phân tích bằng Bedrock, đến khi lưu dữ liệu vào DynamoDB, hoạt động chính xác.\nYêu cầu trước khi kiểm thử Trước khi thực hiện kiểm thử Lambda Function, bạn cần chuẩn bị tệp hóa đơn mẫu để tải lên. Vui lòng tải tệp sau về máy của bạn:\nTải file mẫu demo_invoice.png 🔧 Ghi chú: Nếu bạn sử dụng tệp hóa đơn khác, hãy đổi tên thành demo_invoice.png trước khi tải lên thư mục uploads/ trong S3.\nBước 1: Tải tệp hóa đơn mẫu vào S3 Bucket Truy cập Amazon S3 Console. Vào bucket có tên: invoice-upload-s3-bucket. Mở thư mục uploads/. Nhấn Upload. Nhấn Add files. Chọn file mẫu: demo_invoice.png. Nhấn Upload để tải lên. Kiểm tra sau khi tải tệp. Bước 2: Tạo Test Event trong Lambda Console Mở AWS Lambda Console. Truy cập function UploadInvoiceFileFunction.\nNhấn tab Test để tạo một Test Event mới.\nEvent name: TestUploadInvoice.\nDán nội dung JSON sau vào phần event: { \u0026#34;Records\u0026#34;: [ { \u0026#34;eventVersion\u0026#34;: \u0026#34;2.1\u0026#34;, \u0026#34;eventSource\u0026#34;: \u0026#34;aws:s3\u0026#34;, \u0026#34;awsRegion\u0026#34;: \u0026#34;us-east-1\u0026#34;, \u0026#34;eventTime\u0026#34;: \u0026#34;2025-07-31T12:00:00.000Z\u0026#34;, \u0026#34;eventName\u0026#34;: \u0026#34;ObjectCreated:Put\u0026#34;, \u0026#34;s3\u0026#34;: { \u0026#34;bucket\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;invoice-upload-s3-bucket\u0026#34; }, \u0026#34;object\u0026#34;: { \u0026#34;key\u0026#34;: \u0026#34;uploads/demo_invoice.png\u0026#34; } } } ] } Nhấn Save. Bước 3: Chạy kiểm thử Sau khi tạo xong Test Event, nhấn nút Test để chạy. Quan sát phần Execution results được hiển thị sau khi chạy:\nNếu chạy thành công, bạn sẽ thấy dòng: Status: succeeded cùng với log output hiển thị nội dung xử lý. Bước 4: Kiểm tra log chi tiết trên CloudWatch Trong Lambda Console, chọn tab Monitor. Nhấn View CloudWatch logs. Mở log stream mới nhất. Xem logs event. Bước 5: Kiểm tra dữ liệu trong DynamoDB Truy cập AWS DynamoDB Console. Vào bảng InvoiceData. Nhấn Explore table items. Tìm bản ghi có InvoiceId tương ứng với file demo_invoice.png vừa tải lên để xác nhận dữ liệu đã được lưu thành công. ⚠️ Lưu ý: Đảm bảo tất cả tài nguyên (Lambda, S3, DynamoDB, Textract và Bedrock) đều được tạo trong cùng một Region: N. Virginia (us-east-1) để đảm bảo hệ thống hoạt động đồng bộ.\n"},{"uri":"/vi/5-testwithpostman/5.3-testgetinvoiceid/","title":"Kiểm thử lấy invoice theo ID","tags":[],"description":"","content":"Bước 1: Tạo request Trong Collection InvoiceGetAPI-Tests, nhấn dấu \u0026quot;+\u0026quot; để tạo request. Đặt tên: Get Invoices By ID. Chọn method GET. Truy cập API Gateway, chọn API: GetInvoiceAPI.\nChọn mục Stages.\nBấm dấu “+” để mở ra đường dẫn đến /invoice/{id} như dưới đây:\nChọn phương thức GET và sao chép Invoke URL. Dán Invoke URL vừa sao chép vào trong Postman như sau: Xóa {id} trong API endpoint của Postman và thay bằng ID Invoice trong DynamoDB: https://x4uqolxky6.execute-api.us-east-1.amazonaws.com/dev/invoice/\u0026lt;InvoiceId_trong_DynamoDB\u0026gt; Nhấn nút Send để xem kết quả. Kết quả trả về thành công như sau: Bạn có thể kiểm tra 2 tệp hóa đơn còn lại!\n"},{"uri":"/vi/3-aipoweredinvoiceprocessing/","title":"Xử lý Hóa Đơn bằng AI","tags":[],"description":"","content":"Tổng quan Trong phần này, bạn sẽ triển khai các Lambda function để xử lý hóa đơn bằng trí tuệ nhân tạo (AI). Cụ thể, bạn sẽ tạo các hàm Lambda đảm nhận việc trích xuất dữ liệu từ hóa đơn bằng Amazon Textract và Amazon Bedrock, cũng như truy xuất dữ liệu từ DynamoDB thông qua API Gateway.\nNội dung Tạo IAM Role Tạo Lambda Function #1 Kiểm thử Lambda Function #1 Tạo Lambda Function #2 Kiểm thử Lambda Function #2 "},{"uri":"/vi/7-cleanup/7.4-removes3bucket/","title":"Xóa S3 Bucket","tags":[],"description":"","content":"Các bước thực hiện Mở AWS Management Console → Tìm kiếm dịch vụ S3. Trong danh sách Buckets, tìm và chọn bucket sau: Nhấn Empty. Xác nhận bằng cách nhập: permanently delete → Nhấn Empty. Quay trở lại và chọn bucket đó và nhấn Delete. Xác nhận bằng cách nhập tên bucket đó và nhấn Delete bucket. Lặp lại thao tác trên với invoice-upload-s3-bucket. "},{"uri":"/vi/5-testwithpostman/5.4-testgetinvoicesstarred/","title":"Kiểm thử lấy danh sách hóa đơn đánh dấu","tags":[],"description":"","content":"Bước 1: Tạo request Trong Collection InvoiceGetAPI-Tests, nhấn dấu \u0026quot;+\u0026quot; để tạo request. Đặt tên: Get All Invoices Starred. Chọn method GET. Truy cập API Gateway, chọn API: GetInvoiceAPI.\nChọn mục Stages.\nBấm dấu “+” để mở ra đường dẫn đến /invoice/starred như dưới đây:\nChọn phương thức GET và sao chép Invoke URL. Dán Invoke URL vừa sao chép vào trong Postman như sau: Nhấn nút Send để xem kết quả. Kết quả trả về như sau: Khi trả về kết quả [] tức là hiện tại chưa có hóa đơn nào đánh dấu\n"},{"uri":"/vi/3-aipoweredinvoiceprocessing/3.4-createlambdafunction-fetch/","title":"Tạo Lambda Function #2","tags":[],"description":"","content":"Tổng quan Trong bước này, bạn sẽ tạo Lambda Function thứ hai có tên FetchInvoiceDetailsFunction. Function này có nhiệm vụ truy vấn hoặc cập nhật thông tin hóa đơn trong DynamoDB, phục vụ cho các yêu cầu từ API Gateway.\nBước 1: Truy cập Lambda Console Mở AWS Lambda Console Nhấn Create function Bước 2: Cấu hình Lambda Function Trong phần Author from scratch, nhập các thông tin sau:\nFunction name: FetchInvoiceDetailsFunction Runtime: Python 3.12 Architecture: x86_64 Permissions: Chọn Use an existing role Existing role: LambdaExecutionRole-AIInvoiceScanner Nhấn Create function Bước 3: Thêm mã nguồn Python Cuộn xuống phần Code, thay nội dung mặc định bằng đoạn mã Python sau: import boto3 import json from decimal import Decimal from boto3.dynamodb.conditions import Key dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) table = dynamodb.Table(\u0026#39;InvoiceData\u0026#39;) def decimal_default(obj): if isinstance(obj, Decimal): return float(obj) def lambda_handler(event, context): print(\u0026#34;DEBUG EVENT:\u0026#34;, json.dumps(event)) headers = { \u0026#34;Access-Control-Allow-Origin\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Access-Control-Allow-Credentials\u0026#34;: True, \u0026#34;Access-Control-Allow-Headers\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Access-Control-Allow-Methods\u0026#34;: \u0026#34;OPTIONS,GET,PATCH\u0026#34; } try: http_method = event.get(\u0026#34;httpMethod\u0026#34;, \u0026#34;\u0026#34;) resource = event.get(\u0026#34;resource\u0026#34;, \u0026#34;\u0026#34;) path_params = event.get(\u0026#34;pathParameters\u0026#34;) or {} invoice_id = path_params.get(\u0026#34;id\u0026#34;) # === PATCH /invoice/starred/{id} === if http_method == \u0026#34;PATCH\u0026#34; and invoice_id and resource == \u0026#34;/invoice/starred/{id}\u0026#34;: if not event.get(\u0026#34;body\u0026#34;): return { \u0026#39;statusCode\u0026#39;: 400, \u0026#39;headers\u0026#39;: headers, \u0026#39;body\u0026#39;: json.dumps({\u0026#39;error\u0026#39;: \u0026#39;Body không được để trống\u0026#39;}) } # Kiểm tra tồn tại invoice existing = table.get_item(Key={\u0026#39;InvoiceId\u0026#39;: invoice_id}) if \u0026#39;Item\u0026#39; not in existing: return { \u0026#39;statusCode\u0026#39;: 404, \u0026#39;headers\u0026#39;: headers, \u0026#39;body\u0026#39;: json.dumps({\u0026#39;error\u0026#39;: f\u0026#39;Không tìm thấy hóa đơn với ID {invoice_id}.\u0026#39;}) } body = json.loads(event[\u0026#34;body\u0026#34;]) starred = body.get(\u0026#34;starred\u0026#34;) if not isinstance(starred, bool): return { \u0026#39;statusCode\u0026#39;: 400, \u0026#39;headers\u0026#39;: headers, \u0026#39;body\u0026#39;: json.dumps({\u0026#39;error\u0026#39;: \u0026#39;Trường starred phải là boolean\u0026#39;}) } starred_str = \u0026#34;true\u0026#34; if starred else \u0026#34;false\u0026#34; table.update_item( Key={\u0026#39;InvoiceId\u0026#39;: invoice_id}, UpdateExpression=\u0026#34;SET Starred = :starred\u0026#34;, ExpressionAttributeValues={\u0026#39;:starred\u0026#39;: starred_str} ) return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;headers\u0026#39;: headers, \u0026#39;body\u0026#39;: json.dumps({\u0026#39;message\u0026#39;: \u0026#39;Cập nhật Starred thành công\u0026#39;, \u0026#39;InvoiceId\u0026#39;: invoice_id, \u0026#39;Starred\u0026#39;: starred_str}) } # === PATCH /invoice/tags/{id} === if http_method == \u0026#34;PATCH\u0026#34; and invoice_id and resource == \u0026#34;/invoice/tags/{id}\u0026#34;: if not event.get(\u0026#34;body\u0026#34;): return { \u0026#39;statusCode\u0026#39;: 400, \u0026#39;headers\u0026#39;: headers, \u0026#39;body\u0026#39;: json.dumps({\u0026#39;error\u0026#39;: \u0026#39;Body không được để trống\u0026#39;}) } # Kiểm tra tồn tại invoice existing = table.get_item(Key={\u0026#39;InvoiceId\u0026#39;: invoice_id}) if \u0026#39;Item\u0026#39; not in existing: return { \u0026#39;statusCode\u0026#39;: 404, \u0026#39;headers\u0026#39;: headers, \u0026#39;body\u0026#39;: json.dumps({\u0026#39;error\u0026#39;: f\u0026#39;Không tìm thấy hóa đơn với ID {invoice_id}.\u0026#39;}) } body = json.loads(event[\u0026#34;body\u0026#34;]) tags = body.get(\u0026#34;tags\u0026#34;) if not isinstance(tags, list): return { \u0026#39;statusCode\u0026#39;: 400, \u0026#39;headers\u0026#39;: headers, \u0026#39;body\u0026#39;: json.dumps({\u0026#39;error\u0026#39;: \u0026#39;Tags phải là một mảng\u0026#39;}) } table.update_item( Key={\u0026#39;InvoiceId\u0026#39;: invoice_id}, UpdateExpression=\u0026#34;SET Tags = :tags\u0026#34;, ExpressionAttributeValues={\u0026#39;:tags\u0026#39;: tags} ) return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;headers\u0026#39;: headers, \u0026#39;body\u0026#39;: json.dumps({\u0026#39;message\u0026#39;: \u0026#39;Cập nhật Tags thành công\u0026#39;, \u0026#39;InvoiceId\u0026#39;: invoice_id, \u0026#39;Tags\u0026#39;: tags}) } # === GET /invoice/starred === if http_method == \u0026#34;GET\u0026#34; and resource == \u0026#34;/invoice/starred\u0026#34;: try: response = table.query( IndexName=\u0026#34;StarredInvoicesIndex\u0026#34;, KeyConditionExpression=Key(\u0026#34;IsStarred\u0026#34;).eq(\u0026#34;true\u0026#34;) ) items = response.get(\u0026#34;Items\u0026#34;, []) return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;headers\u0026#39;: headers, \u0026#39;body\u0026#39;: json.dumps(items, default=decimal_default) } except Exception as e: return { \u0026#39;statusCode\u0026#39;: 500, \u0026#39;headers\u0026#39;: headers, \u0026#39;body\u0026#39;: json.dumps({\u0026#39;error\u0026#39;: f\u0026#39;Lỗi truy vấn StarredInvoicesIndex: {str(e)}\u0026#39;}) } # === GET /invoice/{id} === if invoice_id and http_method == \u0026#34;GET\u0026#34;: response = table.get_item(Key={\u0026#39;InvoiceId\u0026#39;: invoice_id}) if \u0026#39;Item\u0026#39; not in response: return { \u0026#39;statusCode\u0026#39;: 404, \u0026#39;headers\u0026#39;: headers, \u0026#39;body\u0026#39;: json.dumps({\u0026#39;error\u0026#39;: f\u0026#39;Không tìm thấy hóa đơn với ID {invoice_id}.\u0026#39;}) } return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;headers\u0026#39;: headers, \u0026#39;body\u0026#39;: json.dumps(response[\u0026#39;Item\u0026#39;], default=decimal_default) } # === GET /invoice?name=... === if http_method == \u0026#34;GET\u0026#34; and event.get(\u0026#39;queryStringParameters\u0026#39;) and event[\u0026#39;queryStringParameters\u0026#39;].get(\u0026#39;name\u0026#39;): name = event[\u0026#39;queryStringParameters\u0026#39;][\u0026#39;name\u0026#39;] try: response = table.query( IndexName=\u0026#39;CustomerName-index\u0026#39;, KeyConditionExpression=Key(\u0026#39;CustomerName\u0026#39;).eq(name) ) items = response.get(\u0026#39;Items\u0026#39;, []) except Exception as e: return { \u0026#39;statusCode\u0026#39;: 500, \u0026#39;headers\u0026#39;: headers, \u0026#39;body\u0026#39;: json.dumps({\u0026#39;error\u0026#39;: f\u0026#39;Lỗi truy vấn CustomerName: {str(e)}\u0026#39;}) } if not items: return { \u0026#39;statusCode\u0026#39;: 404, \u0026#39;headers\u0026#39;: headers, \u0026#39;body\u0026#39;: json.dumps({\u0026#39;error\u0026#39;: f\u0026#39;Không tìm thấy hóa đơn với tên khách hàng {name}.\u0026#39;}) } return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;headers\u0026#39;: headers, \u0026#39;body\u0026#39;: json.dumps(items, default=decimal_default) } # === GET /invoice (tất cả) === if http_method == \u0026#34;GET\u0026#34;: response = table.scan() items = response.get(\u0026#39;Items\u0026#39;, []) return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;headers\u0026#39;: headers, \u0026#39;body\u0026#39;: json.dumps(items, default=decimal_default) } return { \u0026#39;statusCode\u0026#39;: 400, \u0026#39;headers\u0026#39;: headers, \u0026#39;body\u0026#39;: json.dumps({\u0026#39;error\u0026#39;: \u0026#39;Phương thức không được hỗ trợ\u0026#39;}) } except Exception as e: return { \u0026#39;statusCode\u0026#39;: 500, \u0026#39;headers\u0026#39;: headers, \u0026#39;body\u0026#39;: json.dumps({\u0026#39;error\u0026#39;: str(e)}) } Nhấn Deploy để lưu và áp dụng đoạn mã nguồn. Bước 4: Cấu hình Timeout và Memory Vào Configuration \u0026gt; General configuration, nhấn Edit. Cấu hình thông tin như sau:\nDescription: Retrieves invoice data from DynamoDB based on invoice ID via API Gateway request Memory (MB): 128 Timeout: 3 seconds Nhấn Save. Kết luận Bạn đã tạo xong Lambda Function FetchInvoiceDetailsFunction, dùng để xử lý việc truy vấn và cập nhật dữ liệu hóa đơn từ DynamoDB. Function này sẽ được kết nối với API Gateway để phục vụ các yêu cầu từ phía frontend.\n"},{"uri":"/vi/2-environmentsetup/2.4-creates3bucketforinvoices/","title":"Tạo S3 Bucket","tags":[],"description":"","content":"Tổng quan Trong bước này, bạn sẽ tạo một S3 bucket để lưu trữ các tệp hóa đơn mà người dùng tải lên. Bucket này sẽ được tạo trong vùng us-east-1, đồng thời bạn sẽ thiết lập một sự kiện (event notification) để kích hoạt Lambda function mỗi khi có tệp mới được upload vào thư mục.\nBước 1: Truy cập S3 Console Đăng nhập vào AWS Console, tìm S3, sau đó chọn S3 trong kết quả. 💡 Lưu ý: Trước khi tạo, hãy đảm bảo bạn đã chọn đúng region là us-east-1 ở góc trên bên phải màn hình AWS Console.\nViệc tạo S3 bucket ở đúng region là rất quan trọng để các dịch vụ như Lambda hoặc Textract hoạt động đồng bộ.\nNhấn Create bucket để bắt đầu tạo mới. Bước 2: Cấu hình bucket Bucket name: invoice-upload-s3-bucket 💡 Lưu ý: Tên bucket phải duy nhất trên toàn cầu. Bạn có thể thêm hậu tố nếu tên bị trùng, ví dụ: invoice-upload-s3-bucket-123456.\nTrong phần Object Ownership, chọn ACLs disabled.\nBlock Public Access settings: giữ nguyên mặc định (bật toàn bộ) để đảm bảo dữ liệu không công khai.\nTrong phần Bucket Versioning, chọn Disabled. Trong phần Default encryption, chọn Amazon S3 managed keys (SSE-S3).\nNhấn Create bucket để hoàn tất.\nKiểm tra Bucket đã tạo. Bước 3: Tạo thư mục uploads/ Trong bucket vừa tạo, nhấn Create folder. Đặt tên folder là: uploads Nhấn Create folder để xác nhận. Kiểm tra sau khi tạo folder. Bước 7: Thiết lập Event Notification Vào tab Properties của bucket. Kéo xuống phần Event notifications → chọn Create event notification. Cấu hình như sau:\nName: TriggerLambdaOnUpload Prefix: uploads/ Suffix: (để trống) Event types: chọn PUT (All object create events) Destination: chọn Lambda function Lambda function: chọn UploadInvoiceFileFunction Nhấn Save changes để hoàn tất. Nếu chưa thấy Lambda function, hãy đảm bảo bạn đã tạo đúng vùng (us-east-1) và IAM role của Lambda có quyền s3:PutBucketNotification.\n"},{"uri":"/vi/4-deployingapigateway/","title":"Triển khai API Gateway","tags":[],"description":"","content":"Tổng quan Trong phần này, bạn sẽ triển khai API Gateway để giao tiếp giữa frontend và backend thông qua hai API chính: POST và GET.\nNội dung Tạo API Gateway (GET) Tạo API Gateway (POST) "},{"uri":"/vi/7-cleanup/7.5-removecloudwatch/","title":"Xóa CloudWatch Alarms","tags":[],"description":"","content":"Các bước thực hiện Mở AWS Management Console → Tìm kiếm dịch vụ CloudWatch. Trong menu bên trái, chọn Logs → Chọn Log groups. Tìm các logs liên quan đến dự án → Chọn các logs cần xóa. Nhấn Actions → Chọn Delete log group(s). Nhấn Delete. Kiểm tra CloudWatch sau khi xóa. "},{"uri":"/vi/5-testwithpostman/5.5-testupdatestatusstarred/","title":"Kiểm thử cập nhật trạng thái đánh dấu hóa đơn","tags":[],"description":"","content":"Bước 1: Tạo request Trong Collection InvoiceGetAPI-Tests, nhấn dấu \u0026quot;+\u0026quot; để tạo request. Đặt tên: Update Invoice Starred. Chọn method PATCH. Truy cập API Gateway, chọn API: GetInvoiceAPI.\nChọn mục Stages.\nBấm dấu “+” để mở ra đường dẫn đến /invoice/starred/{id} như dưới đây:\nChọn phương thức PATCH và sao chép Invoke URL. Dán Invoke URL vừa sao chép vào trong Postman như sau: Xóa {id} trong API endpoint của Postman và thay bằng ID Invoice trong DynamoDB: https://x4uqolxky6.execute-api.us-east-1.amazonaws.com/dev/invoice/starred/\u0026lt;InvoiceId_trong_DynamoDB\u0026gt; Chọn tab Body → chọn raw → chọn JSON. Dán đoạn mã JSON sau vào Postman để đánh dấu hóa đơn: { \u0026#34;starred\u0026#34;: true } Nhấn nút Send để xem kết quả. Kết quả trả về như sau: Truy cập vào DynamoDB để kiểm tra trường Starred. "},{"uri":"/vi/3-aipoweredinvoiceprocessing/3.5-testlambdafunction-fetch/","title":"Kiểm thử Lambda Function #2","tags":[],"description":"","content":"Tổng quan Trong bước này, bạn sẽ thực hiện kiểm thử Lambda Function FetchInvoiceDetailsFunction. Function này có nhiệm vụ đọc và cập nhật thông tin hóa đơn từ DynamoDB thông qua các API endpoint như GET hoặc PATCH. Kiểm thử sẽ giúp xác minh rằng Lambda hoạt động đúng khi nhận được input từ API Gateway.\n⚠️ Đảm bảo bạn đã có ít nhất một file hóa đơn trong S3 Bucket và bản ghi tương ứng trong bảng DynamoDB InvoiceData trước khi bắt đầu kiểm thử.\nBước 1: Tạo Test Event cho truy xuất dữ liệu Truy cập AWS Lambda Console. Chọn function FetchInvoiceDetailsFunction. Chuyển sang tab Test.\nKéo xuống đến phần Test event và cấu hình như sau:\nEvent name: TestGetInvoice Template: Hello World Dán nội dung JSON sau vào phần event:\n{ \u0026#34;httpMethod\u0026#34;: \u0026#34;GET\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/invoice/demo_invoice.png\u0026#34;, \u0026#34;pathParameters\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;InvoiceId_của_bạn\u0026#34; } } 📌 Thay giá trị của \u0026quot;id\u0026quot; bằng một InvoiceId hợp lệ đã tồn tại trong bảng DynamoDB InvoiceData.\nCuộn lên và nhấn Save. Bước 2: Chạy kiểm thử Sau khi tạo xong Test Event, nhấn nút Test để chạy. Quan sát phần Execution results được hiển thị sau khi chạy:\nNếu chạy thành công, bạn sẽ thấy dòng: Status: succeeded cùng với log output hiển thị nội dung xử lý. "},{"uri":"/vi/5-testwithpostman/","title":"Kiểm thử với Postman","tags":[],"description":"","content":"Tổng quan Trong phần này, bạn sẽ thực hiện các thao tác kiểm thử API liên quan đến hệ thống quản lý hóa đơn thông qua công cụ Postman. Các API này bao gồm các chức năng chính như upload hóa đơn, truy vấn dữ liệu, cập nhật trạng thái và gắn thẻ (tags) để đảm bảo hệ thống hoạt động chính xác và hiệu quả.\nNội dung Kiểm thử upload file hóa đơn Kiểm thử lấy tất cả hóa đơn Kiểm thử lấy hóa đơn theo ID Kiểm thử lấy hóa đơn được đánh dấu Kiểm thử cập nhật hóa đơn đánh dấu Kiểm thử cập nhật tags hóa đơn Kiểm thử lấy hóa đơn theo tên khách hàng "},{"uri":"/vi/2-environmentsetup/2.5-createdynamodbtableforinvoices/","title":"Tạo DynamoDB Table","tags":[],"description":"","content":"Tổng quan Trong bước này, bạn sẽ tạo một DynamoDB Table để lưu trữ thông tin hóa đơn sau khi được xử lý bởi Lambda function. Bảng sẽ sử dụng chế độ on-demand và có thêm 2 Global Secondary Indexes (GSIs) để hỗ trợ truy vấn theo tên khách hàng và các hóa đơn đánh dấu sao.\nBước 1: Truy cập DynamoDB Console Đăng nhập vào AWS Console, tìm DynamoDB, sau đó chọn DynamoDB trong kết quả. 💡 Lưu ý: Trước khi nhấn Create table, hãy đảm bảo bạn đã chọn đúng region là US East (N. Virginia) (us-east-1) ở góc trên bên phải màn hình AWS Console.\nNhấn Create table để bắt đầu tạo bảng mới. Bước 2: Cấu hình bảng DynamoDB Table name: InvoiceData\nPartition key:\nName: InvoiceId Type: String Bỏ qua phần Sort key (không cần thiết).\nTrong phần Table settings, Chọn Default settings để chuyển sang chế độ On-demand capacity. Nhấn Create table để hoàn tất. Bước 3: Thêm Global Secondary Index (GSI) Sau khi bảng InvoiceData được tạo thành công, bạn sẽ thêm hai chỉ mục phụ:\nGSI #1: CustomerName-index Trong trang chi tiết bảng, chọn tab Indexes. Nhấn Create index. Cấu hình:\nPartition key: CustomerName Data type: String Sort key: (để trống) Projected attributes: chọn All Nhấn Create index. GSI #2: StarredInvoicesIndex Nhấn Create index lần nữa để tạo GSI thứ hai. Cấu hình:\nPartition key: IsStarred (kiểu String) Sort key: CreatedAt (kiểu String) Index name: StarredInvoicesIndex Projected attributes: chọn All Nhấn Create index. Đảm bảo cả hai GSI CustomerName-index và StarredInvoicesIndex đều có trạng thái ACTIVE trước khi tiếp tục cấu hình Lambda function. ⚠️ Nếu trạng thái của GSI vẫn là Creating, bạn cần đợi vài phút đến khi chuyển sang Active trước khi thực hiện truy vấn hoặc triển khai Lambda truy cập GSI.\n"},{"uri":"/vi/7-cleanup/7.6-removeiam/","title":"Xóa IAM User và Policy","tags":[],"description":"","content":"\r⚠️ Lưu ý: Hãy đăng nhập bằng root user để xóa dịch vụ IAM và Policy.\nCác bước thực hiện Mở AWS Management Console → Tìm kiếm dịch vụ IAM. Ở thanh điều hướng bên trái, chọn Users. Tìm và chọn user ai-invoice-scanner-user để vào trang thông tin chi tiết của user. Cuộn xuống phần Permissions policies, chọn tất cả các policy đang gán cho user, sau đó nhấn nút Remove. Nhấn Remove policies để xác nhận gỡ các policy khỏi user. Truy cập tab Security credentials. Cuộn xuống phần Access keys, nhấn Actions → Delete để xóa access key. Sau khi xóa access key, cuộn lên đầu trang → Nhấn Delete để xóa IAM User. Trong quá trình xóa, nhấn Deactivate access key nếu được yêu cầu. Trong cửa sổ xác nhận, nhập confirm → Nhấn Delete user. Sau khi xóa user xong, ở thanh điều hướng bên trái, chọn Policies. Tìm policy AIInvoiceScannerFullPolicy → Nhấn Delete. Nhập lại tên policy để xác nhận → Nhấn Delete. Lặp lại thao tác trên để xóa policy AmplifyAdminPolicy. Nhập lại tên policy để xác nhận → Nhấn Delete. ℹ️ Để cẩn thận, bạn hãy kiểm tra các dịch vụ có liên quan đến dự án một lần nữa để tránh phát sinh chi phí sau này nhé!\n"},{"uri":"/vi/2-environmentsetup/2.6-requestnovaproaccess/","title":"Kích hoạt Nova Pro","tags":[],"description":"","content":"Tổng quan Trong bước này, bạn sẽ kích hoạt model Nova Pro trên Amazon Bedrock để sử dụng trong dự án Serverless Invoices Scanner. Đây là một trong những model ngôn ngữ mạnh mẽ do chính Amazon phát triển, phù hợp cho tác vụ trích xuất, phân tích và phân loại thông tin từ hóa đơn.\nBạn chỉ cần kích hoạt model một lần duy nhất cho mỗi region. Trong dự án này, hãy đảm bảo đang thao tác ở us-east-1 (N. Virginia) để đồng bộ với Lambda, S3 và các dịch vụ khác.\nBước 1: Truy cập Amazon Bedrock Console Đăng nhập vào AWS Console, tìm Bedrock, sau đó chọn Amazon Bedrock. Trong giao diện Amazon Bedrock, ở thanh điều hướng bên trái, chọn Model access. Bước 2: Kích hoạt mô hình Nova Pro Tại phần Base models, cuộn để tìm dòng có tên Nova Pro.\nNhấn vào Available to request, sau đó chọn Request model access.\nNhấn Next để tiếp tục. Nhấn Submit để gửi yêu cầu truy cập model. Sau khi gửi thành công, chờ vài giây đến vài phút, trạng thái model sẽ chuyển sang Access granted. Hoàn tất Bạn đã kích hoạt thành công mô hình Nova Pro trên Amazon Bedrock. Model này giờ đây đã sẵn sàng để sử dụng trong Lambda Function để xử lý dữ liệu hóa đơn trong hệ thống Serverless Invoices Scanner.\n"},{"uri":"/vi/5-testwithpostman/5.6-testupdatetags/","title":"Kiểm thử cập nhật danh mục hóa đơn","tags":[],"description":"","content":"Bước 1: Tạo request Trong Collection InvoiceGetAPI-Tests, nhấn dấu \u0026quot;+\u0026quot; để tạo request. Đặt tên: Update Invoice Tags. Chọn method PATCH. Truy cập API Gateway, chọn API: GetInvoiceAPI.\nChọn mục Stages.\nBấm dấu “+” để mở ra đường dẫn đến /invoice/tags/{id} như dưới đây:\nChọn phương thức PATCH và sao chép Invoke URL. Dán Invoke URL vừa sao chép vào trong Postman như sau: Xóa {id} trong API endpoint của Postman và thay bằng ID Invoice trong DynamoDB: https://x4uqolxky6.execute-api.us-east-1.amazonaws.com/dev/invoice/tags/\u0026lt;InvoiceId_trong_DynamoDB\u0026gt; Chọn tab Body → chọn raw → chọn JSON. Dán đoạn mã JSON sau vào Postman để đánh dấu hóa đơn: { \u0026#34;tags\u0026#34;: [\u0026#34;VIP\u0026#34;, \u0026#34;Urgent\u0026#34;] } Nhấn nút Send để xem kết quả. Kết quả trả về như sau: Truy cập vào DynamoDB để kiểm tra trường Tags. "},{"uri":"/vi/6-deployingfrontend/","title":"Triển khai Frontend","tags":[],"description":"","content":"Yêu cầu Đảm bảo bạn đã tải Visual Studio Code. Nếu bạn chưa tải thì hãy tải tại liên kết sau: https://code.visualstudio.com/download. Bước 1: Tải xuống source code Nhấn vào Tải xuống source code. Giải nén file zip vừa tải xuống. Bước 2: Cập nhật API Endpoint Mở Visual Studio Code. Mở tệp .env và thay giá trị API endpoint bằng API ID tương ứng từ API Gateway: REACT_APP_API_UPLOAD_URL : Dùng API ID của PostInvoiceAPI (AWS API Gateway). REACT_APP_API_INVOICE_URL : Dùng API ID của GetInvoiceAPI (AWS API Gateway). REACT_APP_API_UPDATE_TAGS_URL : Dùng API ID của GetInvoiceAPI (AWS API Gateway). REACT_APP_API_UPDATE_STARRED_URL : Dùng API ID của GetInvoiceAPI (AWS API Gateway). Bước 3: Cấu hình Amplify Mở Terminal bằng cách sử dụng phím Ctrl + ~.\nTrỏ đến thư mục gốc của dự án bằng cách sử dụng:\ncd \u0026lt;folder_name\u0026gt; Chạy câu lệnh sau để cài đặt dependencies: npm install Chạy câu lệnh sau để cài đặt AWS Amplify CLI: npm install -g @aws-amplify/cli Sau khi cài đặt xong, kiểm tra AWS Amplify CLI đã cài đặt thành công chưa bằng cách dùng câu lệnh sau: amplify -v Sử dụng câu lệnh sau để cấu hình Amplify: amplify configure ⚠️ Lưu ý: Sau khi dùng câu lệnh amplify configure để cấu hình, lập tức sẽ xuất hiện tab trang mới. bạn có thể đóng tab và quay trở lại Visual Studio Code tiếp tục cấu hình nhé!\nTrong cấu hình Amplify, bạn thực hiện như sau:\nRegion: chọn us-east-1. Access Key ID: điền access key của IAM User mà bạn đã tạo. Secret Access Key: điền secret key của IAM User mà bạn đã tạo. Profile Name: chọn default. Sử dụng câu lệnh sau để khởi tạo Amplify: amplify init Bạn hãy cấu hình như sau để khởi tạo Amplify:\n? Do you want to use an existing environment: chọn No. ? Enter a name for the environment: dev. ? Select the authentication method you want to use: AWS access keys. ? accessKeyId: điền access key của IAM User mà bạn đã tạo. ? secretAccessKey: điền secret key của IAM User mà bạn đã tạo. ? region: us-east-1. Bước 4: Cấu hình Cognito Sử dụng câu lệnh sau để thêm Auth của AWS Cognito: amplify add auth Cấu hình thêm Auth như sau:\nDo you want to use the default authentication and security configuration?: Default configuration. How do you want users to be able to sign in?: Email. Do you want to configure advanced settings?: No, I am done. Sau đó triển khai các thay đổi: amplify push Bước 5: Chạy ứng dụng Khởi chạy ứng dụng trong: npm start Bạn hãy thử thao tác các chức năng như: Tải tệp hóa đơn. Xem hóa đơn chi tiết. Xem tất cả hóa đơn. Tra cứu hóa đơn theo ID hoặc tên khách hàng. Xuất tệp Excel. Lọc tìm kiếm theo thời gian. Sắp xếp theo tổng số tiền. Sắp xếp theo ngày hóa đơn. Kéo - thả khi tải tệp hóa đơn. Xem tags của hóa đơn. Thêm tags hóa đơn. Chỉnh sửa tags hóa đơn. Lọc tags hóa đơn. Đánh dấu hóa đơn quan trọng. "},{"uri":"/vi/7-cleanup/","title":"Dọn dẹp tài nguyên","tags":[],"description":"","content":"Tổng quan Trong phần này, bạn sẽ thực hiện việc xóa và giải phóng toàn bộ các tài nguyên AWS đã được tạo trong quá trình triển khai hệ thống Serverless Invoices Scanner. Việc dọn dẹp giúp tránh phát sinh chi phí không mong muốn và đảm bảo môi trường AWS của bạn luôn gọn gàng, tối ưu. Các thao tác bao gồm xóa bucket S3, bảng DynamoDB, các hàm Lambda, API Gateway, dịch vụ Amplify, Cognito và các tài nguyên liên quan khác.\nNội dung Xóa API Gateway Xóa Lambda Xóa DynamoDB Xóa S3 Bucket Xóa CloudWatch Alarms Xóa IAM User "},{"uri":"/vi/5-testwithpostman/5.7-testgetinvoicebyname/","title":"Kiểm thử lấy hóa đơn theo tên khách hàng","tags":[],"description":"","content":"Bước 1: Tạo request Trong Collection InvoiceGetAPI-Tests, nhấn dấu \u0026quot;+\u0026quot; để tạo request. Đặt tên: Get Invoices By Name. Chọn method GET. Truy cập API Gateway, chọn API: GetInvoiceAPI.\nChọn mục Stages.\nBấm dấu “+” để mở ra đường dẫn đến /invoice như dưới đây:\nChọn phương thức GET và sao chép Invoke URL. Dán Invoke URL vừa sao chép vào trong Postman như sau: Thêm đoạn dưới đây vào phía sau API endpoint: ?name=\u0026lt;ten_khach_hang\u0026gt; Nhập tên khách hàng cần tìm trong hóa đơn. Nhấn nút Send để xem kết quả. Kết quả trả về như sau: "},{"uri":"/vi/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"/vi/tags/","title":"Tags","tags":[],"description":"","content":""}]